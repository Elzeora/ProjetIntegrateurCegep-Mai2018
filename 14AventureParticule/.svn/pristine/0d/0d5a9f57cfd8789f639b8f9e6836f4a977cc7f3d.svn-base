<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_144) on Tue Apr 24 14:13:13 EDT 2018 -->
<title>SVector3d</title>
<meta name="date" content="2018-04-24">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SVector3d";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":10,"i5":10,"i6":9,"i7":9,"i8":9,"i9":10,"i10":10,"i11":9,"i12":10,"i13":10,"i14":10,"i15":9,"i16":9,"i17":9,"i18":9,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SVector3d.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../ressources/SVector.html" title="interface in ressources"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../ressources/SWriteable.html" title="interface in ressources"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?ressources/SVector3d.html" target="_top">Frames</a></li>
<li><a href="SVector3d.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">ressources</div>
<h2 title="Class SVector3d" class="title">Class SVector3d</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>ressources.SVector3d</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Comparable&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;, <a href="../ressources/SVector.html" title="interface in ressources">SVector</a>, <a href="../ressources/SWriteable.html" title="interface in ressources">SWriteable</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">SVector3d</span>
extends java.lang.Object
implements <a href="../ressources/SVector.html" title="interface in ressources">SVector</a>, java.lang.Comparable&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;</pre>
<div class="block"><p>
 La classe <b>SVector3d</b> représente une vecteur <i>x</i>, <i>y</i> et <i>z</i> à trois dimensions. 
 </p>
 
 <p>
 Les opérations mathématiques supportées sont les suivantes : 
 <ul>- L'addition.</ul>
 <ul>- La soustraction.</ul>
 <ul>- La multiplication par un scalaire.</ul>
 <ul>- Le produit scalaire (<i>dot product</i>).</ul>
 <ul>- Le produit vectoriel (<i>cross product</i>).</ul>
 <ul>- La normalisation (vecteur de module 1).</ul>
 </p></div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2014-12-16</dd>
<dt><span class="simpleTagLabel">Version:</span></dt>
<dd>2017-12-20 (version labo – Le ray tracer v2.1)</dd>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Simon Vezina</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#ORIGIN">ORIGIN</a></span></code>
<div class="block">La constante <b>ORIGIN</b> représente un vecteur origine étant situé à la coordonnée (0.0, 0.0, 0.0).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#UNITARY_X">UNITARY_X</a></span></code>
<div class="block">La constant <b>UNITARY_X</b> correspond au vecteur unitaire parallèle à l'axe x correspondant à (1.0, 0.0, 0.0).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#UNITARY_Y">UNITARY_Y</a></span></code>
<div class="block">La constant <b>UNITARY_Y</b> correspond au vecteur unitaire parallèle à l'axe y correspondant à (0.0, 1.0, 0.0).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#UNITARY_Z">UNITARY_Z</a></span></code>
<div class="block">La constant <b>UNITARY_Z</b> correspond au vecteur unitaire parallèle à l'axe z correspondant à (0.0, 0.0, 1.0).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#ZERO">ZERO</a></span></code>
<div class="block">La constant <b>ZERO</b> correspond au vecteur nul correspondant à la coordonnée (0.0, 0.0, 0.0).</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#SVector3d--">SVector3d</a></span>()</code>
<div class="block">Constructeur représentant un vecteur 3d à l'origine d'un système d'axe xyz.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#SVector3d-double-double-double-">SVector3d</a></span>(double&nbsp;x,
         double&nbsp;y,
         double&nbsp;z)</code>
<div class="block">Constructeur avec composante <i>x</i>,<i>y</i> et <i>z</i> du vecteur 3d.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#SVector3d-java.lang.String-">SVector3d</a></span>(java.lang.String&nbsp;string)</code>
<div class="block">Constructeur d'un vecteur 3d en utilisant un string décrivant les paramètres x, y et z du vecteur.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#Across_BcrossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">Across_BcrossC</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C avec l'ordre de priorité
 D = A x (B x C)
 où D est le résultat du triple produit vectoriel.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#AcrossB_crossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">AcrossB_crossC</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C avec l'ordre de priorité
 D = (A x B) x C
 où D est le résultat du triple produit vectoriel.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#AcrossBcrossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">AcrossBcrossC</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
             <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
             <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#AcrossBdotC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">AcrossBdotC</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
           <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
           <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode qui effectue le <b>produit mixte</b> de trois vecteurs A, B et C.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#add-ressources.SVector-">add</a></span>(<a href="../ressources/SVector.html" title="interface in ressources">SVector</a>&nbsp;v)</code>
<div class="block">Méthode permettant d'effectuer l'addition mathématique entre deux vecteurs.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#add-ressources.SVector3d-">add</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode qui calcule <b>l'addition</b> de deux vecteurs.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#AdotCsubstractBdotC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">AdotCsubstractBdotC</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                   <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                   <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode pour effectuer la <b>soustraction entre deux produits scalaires</b>.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#AmultiplyBaddC-double-ressources.SVector3d-ressources.SVector3d-">AmultiplyBaddC</a></span>(double&nbsp;a,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</code>
<div class="block">Méthode qui effectue une opération spécialisée de multiplication par un scalaire et d'addition vectorielle équivalente à
 V = a*B + C.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#angleBetween-ressources.SVector3d-ressources.SVector3d-">angleBetween</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
            <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B)</code>
<div class="block">Méthode permettant d'obtenir l'angle entre deux vecteurs A et B.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#compareTo-ressources.SVector3d-">compareTo</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;o)</code>&nbsp;</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#cross-ressources.SVector3d-">cross</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode pour effectuer le <b>produit vectoriel</b> avec un autre vecteur v.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#distance-ressources.SVector3d-ressources.SVector3d-">distance</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
        <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B)</code>
<div class="block">Méthode pour obtenir la distance entre deux points.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#dot-ressources.SVector-">dot</a></span>(<a href="../ressources/SVector.html" title="interface in ressources">SVector</a>&nbsp;v)</code>
<div class="block">Méthode permettant d'effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#dot-ressources.SVector3d-">dot</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode pour effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;obj)</code>&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#findMaxValue-java.util.List-">findMaxValue</a></span>(java.util.List&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;&nbsp;value_list)</code>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus grandes (en considérant le signe) parmi un ensemble de vecteurs.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#findMaxValue-ressources.SVector3d:A-">findMaxValue</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>[]&nbsp;tab)</code>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus grandes (en considérant le signe) parmi un ensemble de vecteurs.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#findMinValue-java.util.List-">findMinValue</a></span>(java.util.List&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;&nbsp;value_list)</code>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus petites (en considérant le signe) parmi un ensemble de vecteurs.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>static <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#findMinValue-ressources.SVector3d:A-">findMinValue</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>[]&nbsp;tab)</code>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus petites (en considérant le signe) parmi un ensemble de vecteurs.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#getX--">getX</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée x du vecteur.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#getY--">getY</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée y du vecteur.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#getZ--">getZ</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée z du vecteur.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#modulus--">modulus</a></span>()</code>
<div class="block">Méthode pour obtenir le <b>module</b> d'un vecteur.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#multiply-double-">multiply</a></span>(double&nbsp;m)</code>
<div class="block">Méthode qui effectue la <b>multiplication d'un vecteur par une scalaire</b>.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#normalize--">normalize</a></span>()</code>
<div class="block">Méthode pour <b>normaliser</b> un vecteur à trois dimensions.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#setX-double-">setX</a></span>(double&nbsp;x)</code>&nbsp;</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#setY-double-">setY</a></span>(double&nbsp;y)</code>&nbsp;</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#setZ-double-">setZ</a></span>(double&nbsp;z)</code>&nbsp;</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code><a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#substract-ressources.SVector3d-">substract</a></span>(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode qui calcul la <b>soustraction</b> de deux vecteurs.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#toString--">toString</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../ressources/SVector3d.html#write-java.io.BufferedWriter-">write</a></span>(java.io.BufferedWriter&nbsp;bw)</code>
<div class="block">Méthode pour écrire les paramètres xyz du vecteur dans un fichier en format txt.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>getClass, notify, notifyAll, wait, wait, wait</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.ressources.SVector">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;ressources.<a href="../ressources/SVector.html" title="interface in ressources">SVector</a></h3>
<code><a href="../ressources/SVector.html#linearBarycentricInterpolation-java.util.List-java.util.List-">linearBarycentricInterpolation</a>, <a href="../ressources/SVector.html#linearBarycentricInterpolation-ressources.SVector-ressources.SVector-ressources.SVector-double-double-">linearBarycentricInterpolation</a>, <a href="../ressources/SVector.html#linearInterpolation-ressources.SVector-ressources.SVector-double-">linearInterpolation</a></code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="ZERO">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ZERO</h4>
<pre>public static final&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a> ZERO</pre>
<div class="block">La constant <b>ZERO</b> correspond au vecteur nul correspondant à la coordonnée (0.0, 0.0, 0.0).</div>
</li>
</ul>
<a name="UNITARY_X">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>UNITARY_X</h4>
<pre>public static final&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a> UNITARY_X</pre>
<div class="block">La constant <b>UNITARY_X</b> correspond au vecteur unitaire parallèle à l'axe x correspondant à (1.0, 0.0, 0.0).
 On utilise également la notation <b><i>i</i></b> pour le représenter.</div>
</li>
</ul>
<a name="UNITARY_Y">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>UNITARY_Y</h4>
<pre>public static final&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a> UNITARY_Y</pre>
<div class="block">La constant <b>UNITARY_Y</b> correspond au vecteur unitaire parallèle à l'axe y correspondant à (0.0, 1.0, 0.0).
 On utilise également la notation <b><i>j</i></b> pour le représenter.</div>
</li>
</ul>
<a name="UNITARY_Z">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>UNITARY_Z</h4>
<pre>public static final&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a> UNITARY_Z</pre>
<div class="block">La constant <b>UNITARY_Z</b> correspond au vecteur unitaire parallèle à l'axe z correspondant à (0.0, 0.0, 1.0).
 On utilise également la notation <b><i>k</i></b> pour le représenter.</div>
</li>
</ul>
<a name="ORIGIN">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ORIGIN</h4>
<pre>public static final&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a> ORIGIN</pre>
<div class="block">La constante <b>ORIGIN</b> représente un vecteur origine étant situé à la coordonnée (0.0, 0.0, 0.0).
 Il est égal au vecteur <b>ZERO</b>.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="SVector3d--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d()</pre>
<div class="block">Constructeur représentant un vecteur 3d à l'origine d'un système d'axe xyz.</div>
</li>
</ul>
<a name="SVector3d-double-double-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(double&nbsp;x,
                 double&nbsp;y,
                 double&nbsp;z)</pre>
<div class="block">Constructeur avec composante <i>x</i>,<i>y</i> et <i>z</i> du vecteur 3d.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>x</code> - La composante <i>x</i> du vecteur.</dd>
<dd><code>y</code> - La composante <i>y</i> du vecteur.</dd>
<dd><code>z</code> - La composante <i>z</i> du vecteur.</dd>
</dl>
</li>
</ul>
<a name="SVector3d-java.lang.String-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(java.lang.String&nbsp;string)
          throws <a href="../ressources/SReadingException.html" title="class in ressources">SReadingException</a></pre>
<div class="block">Constructeur d'un vecteur 3d en utilisant un string décrivant les paramètres x, y et z du vecteur. 
 Une lecture autorisée peut prendre la forme suivante : "double x" "double y" "double z" (incluant la notation avec , ( ) [ ] comme délimieur dans l'expression du string comme par exemple (2.3, 4.3, 5.7) ).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>string</code> - - Le string de l'expression du vecteur en paramètres x, y, et z.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="../ressources/SReadingException.html" title="class in ressources">SReadingException</a></code> - Si le format de la lecture n'est pas adéquat.</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="getX--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getX</h4>
<pre>public&nbsp;double&nbsp;getX()</pre>
<div class="block">Méthode qui donne accès à la coordonnée x du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée x.</dd>
</dl>
</li>
</ul>
<a name="getY--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getY</h4>
<pre>public&nbsp;double&nbsp;getY()</pre>
<div class="block">Méthode qui donne accès à la coordonnée y du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée y.</dd>
</dl>
</li>
</ul>
<a name="getZ--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getZ</h4>
<pre>public&nbsp;double&nbsp;getZ()</pre>
<div class="block">Méthode qui donne accès à la coordonnée z du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée z.</dd>
</dl>
</li>
</ul>
<a name="add-ressources.SVector-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;add(<a href="../ressources/SVector.html" title="interface in ressources">SVector</a>&nbsp;v)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../ressources/SVector.html#add-ressources.SVector-">SVector</a></code></span></div>
<div class="block">Méthode permettant d'effectuer l'addition mathématique entre deux vecteurs.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../ressources/SVector.html#add-ressources.SVector-">add</a></code>&nbsp;in interface&nbsp;<code><a href="../ressources/SVector.html" title="interface in ressources">SVector</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à additionner</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur résultat de l'addition des deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="add-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;add(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode qui calcule <b>l'addition</b> de deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à ajouter.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La somme des deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="substract-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>substract</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;substract(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode qui calcul la <b>soustraction</b> de deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - - Le vecteur à soustraire au vecteur présent.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La soustraction des deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="multiply-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>multiply</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;multiply(double&nbsp;m)</pre>
<div class="block">Méthode qui effectue la <b>multiplication d'un vecteur par une scalaire</b>.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../ressources/SVector.html#multiply-double-">multiply</a></code>&nbsp;in interface&nbsp;<code><a href="../ressources/SVector.html" title="interface in ressources">SVector</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>m</code> - Le scalaire.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La multiplication d'un vecteur par un scalaire.</dd>
</dl>
</li>
</ul>
<a name="modulus--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>modulus</h4>
<pre>public&nbsp;double&nbsp;modulus()</pre>
<div class="block">Méthode pour obtenir le <b>module</b> d'un vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le module du vecteur.</dd>
</dl>
</li>
</ul>
<a name="normalize--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalize</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;normalize()
                    throws <a href="../ressources/SImpossibleNormalizationException.html" title="class in ressources">SImpossibleNormalizationException</a></pre>
<div class="block">Méthode pour <b>normaliser</b> un vecteur à trois dimensions. 
 Un vecteur normalisé possède la même orientation, mais possède une <b> longeur unitaire </b>.
 Si le <b>module du vecteur est nul</b>, le vecteur normalisé sera le <b> vecteur nul </b> (0.0, 0.0, 0.0).</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur normalisé.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="../ressources/SImpossibleNormalizationException.html" title="class in ressources">SImpossibleNormalizationException</a></code> - Si le vecteur ne peut pas être normalisé étant trop petit (modulus() <  SMath.EPSILON) ou de longueur nulle.</dd>
</dl>
</li>
</ul>
<a name="dot-ressources.SVector-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dot</h4>
<pre>public&nbsp;double&nbsp;dot(<a href="../ressources/SVector.html" title="interface in ressources">SVector</a>&nbsp;v)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../ressources/SVector.html#dot-ressources.SVector-">SVector</a></code></span></div>
<div class="block">Méthode permettant d'effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../ressources/SVector.html#dot-ressources.SVector-">dot</a></code>&nbsp;in interface&nbsp;<code><a href="../ressources/SVector.html" title="interface in ressources">SVector</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à mettre en produit scalaire avec le vecteur courant.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le résultat du produit scalaire.</dd>
</dl>
</li>
</ul>
<a name="dot-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dot</h4>
<pre>public&nbsp;double&nbsp;dot(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode pour effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à mettre en produit scalaire.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le produit scalaire entre les deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="cross-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cross</h4>
<pre>public&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;cross(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode pour effectuer le <b>produit vectoriel</b> avec un autre vecteur v.
 <p>
 Cette version du produit vectoriel est implémenté en respectant la <b> règle de la main droite </b>.
 Il est important de rappeler que le produit vectoriel est <b> anticommutatif </b> (AxB = -BxA) et que l'ordre des vecteurs doit être adéquat pour obtenir le résultat désiré.
 Si l'un des deux vecteurs est <b> nul </b> ou les deux vecteurs sont <b> parallèles </b>, le résultat sera un <b> vecteur nul </b>.
 </p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le second vecteur dans le produit vectoriel.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le résultat du produit vectoriel.</dd>
</dl>
</li>
</ul>
<a name="findMinValue-java.util.List-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findMinValue</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;findMinValue(java.util.List&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;&nbsp;value_list)</pre>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus petites (en considérant le signe) parmi un ensemble de vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>value_list</code> - La liste des vecteurs à analyser.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Un vecteur ayant comme coordonnée les plus petites valeurs (x,y,z) trouvées.</dd>
</dl>
</li>
</ul>
<a name="findMinValue-ressources.SVector3d:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findMinValue</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;findMinValue(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>[]&nbsp;tab)</pre>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus petites (en considérant le signe) parmi un ensemble de vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>tab</code> - - Le tableau des vecteurs à analyser.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Un vecteur ayant comme coordonnée les plus petites valeurs (x,y,z) trouvées.</dd>
</dl>
</li>
</ul>
<a name="findMaxValue-java.util.List-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findMaxValue</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;findMaxValue(java.util.List&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;&nbsp;value_list)</pre>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus grandes (en considérant le signe) parmi un ensemble de vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>value_list</code> - La liste des vecteurs à analyser.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Un vecteur ayant comme coordonnée les plus grandes valeurs (x,y,z) trouvées.</dd>
</dl>
</li>
</ul>
<a name="findMaxValue-ressources.SVector3d:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findMaxValue</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;findMaxValue(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>[]&nbsp;tab)</pre>
<div class="block">Méthode pour obtenir un vecteur avec les coordonnée (x,y,z) les plus grandes (en considérant le signe) parmi un ensemble de vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>tab</code> - - Le tableau des vecteurs à analyser.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Un vecteur ayant comme coordonnée les plus grandes valeurs (x,y,z) trouvées.</dd>
</dl>
</li>
</ul>
<a name="write-java.io.BufferedWriter-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>write</h4>
<pre>public&nbsp;void&nbsp;write(java.io.BufferedWriter&nbsp;bw)
           throws java.io.IOException</pre>
<div class="block">Méthode pour écrire les paramètres xyz du vecteur dans un fichier en format txt. Le format de l'écriture est "x"  "y"  "z" comme l'exemple suivant : 0.6  0.2  0.5</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../ressources/SWriteable.html#write-java.io.BufferedWriter-">write</a></code>&nbsp;in interface&nbsp;<code><a href="../ressources/SWriteable.html" title="interface in ressources">SWriteable</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>bw</code> - Le buffer d'écriture.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.io.IOException</code> - S'il y a une erreur avec le buffer d'écriture.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><code>BufferedWriter</code></dd>
</dl>
</li>
</ul>
<a name="distance-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distance</h4>
<pre>public static&nbsp;double&nbsp;distance(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                              <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B)</pre>
<div class="block">Méthode pour obtenir la distance entre deux points.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - Le premier point.</dd>
<dd><code>B</code> - Le deuxième point.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La distance entre le point A et B.</dd>
</dl>
</li>
</ul>
<a name="angleBetween-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>angleBetween</h4>
<pre>public static&nbsp;double&nbsp;angleBetween(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                  <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B)</pre>
<div class="block">Méthode permettant d'obtenir l'angle entre deux vecteurs A et B. L'angle sera obtenu en radian.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - Le premier vecteur.</dd>
<dd><code>B</code> - Le second vecteur.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>L'angle entre les deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="AdotCsubstractBdotC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>AdotCsubstractBdotC</h4>
<pre>public static&nbsp;double&nbsp;AdotCsubstractBdotC(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                         <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                         <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block">Méthode pour effectuer la <b>soustraction entre deux produits scalaires</b>. Cette opération vectorielle est équivalente à l'expression
 <ul>(A - B) . C = A . C - B . C </ul></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - - Le vecteur A de l'expression.</dd>
<dd><code>B</code> - - Le vecteur B de l'expression.</dd>
<dd><code>C</code> - - Le vecteur C de l'expression.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le scalaire représentant la solution de l'équation.</dd>
</dl>
</li>
</ul>
<a name="AcrossBdotC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>AcrossBdotC</h4>
<pre>public static&nbsp;double&nbsp;AcrossBdotC(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                 <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                 <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block">Méthode qui effectue le <b>produit mixte</b> de trois vecteurs A, B et C. Cette opération vectorielle est équivalente à l'expression
 <ul>(A x B) . C = (Ax*By*Cz + Bx*Cy*Az + Cx*Ay*Bz) - (Az*By*Cx + Bx*Cz*Ay + Cy*Ax*Bz)</ul>
 Il est à remarquer que si deux des trois vecteurs sont égaux ou colinéaires, le produit mixte est nul.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - - Le 1ier vecteur dans le produit mixte.</dd>
<dd><code>B</code> - - Le 2ième vecteur dans le produit mixte.</dd>
<dd><code>C</code> - - Le 3ième vecteur dans le produit mixte.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le scalaire résultant du produit mixte.</dd>
</dl>
</li>
</ul>
<a name="AcrossBcrossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>AcrossBcrossC</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;AcrossBcrossC(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                      <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                      <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block">Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C. Cette opération vectorielle est équivalente à l'expression
 <ul>(A x B) x C = (A . C) B - (B . C) A</ul>  
 <p>Il est important de préciser que les deux expressions
 <ul>(A x B) x C != A x (B x C)</ul>
 ne sont pas égaux. L'ordre de priorité des opérations doit être bien défini.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - - Le 1ier vecteur dans le double produit vectoriel.</dd>
<dd><code>B</code> - - Le 2ième vecteur dans le double produit vectoriel.</dd>
<dd><code>C</code> - - Le 3ième vecteur dans le double produit vectoriel.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur résultant du produit mixte.</dd>
</dl>
</li>
</ul>
<a name="Across_BcrossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Across_BcrossC</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;Across_BcrossC(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block"><p>Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C avec l'ordre de priorité</p>
 <ul>D = A x (B x C)</ul>
 <p>où D est le résultat du triple produit vectoriel. Cette opération vectorielle est équivalente à l'expression</p>
 <ul>A x (B x C) = (A . C) B - (A . B) C</ul>  
 <p>et il est important de préciser que les deux expressions</p>
 <ul>A x (B x C) != (A x B) x C</ul>
 <p>ne sont pas égaux puisque le <b>produit vectoriel n'est pas commutatif</b>.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - - Le 1ier vecteur dans le double produit vectoriel.</dd>
<dd><code>B</code> - - Le 2ième vecteur dans le double produit vectoriel.</dd>
<dd><code>C</code> - - Le 3ième vecteur dans le double produit vectoriel.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur résultant du triple produit vectoriel.</dd>
</dl>
</li>
</ul>
<a name="AcrossB_crossC-ressources.SVector3d-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>AcrossB_crossC</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;AcrossB_crossC(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;A,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block"><p>Méthode qui effectue le <b>triple produit vectoriel</b> de trois vecteurs A, B et C avec l'ordre de priorité</p>
 <ul>D = (A x B) x C</ul>
 <p>où D est le résultat du triple produit vectoriel. Cette opération vectorielle est équivalente à l'expression</p>
 <ul>(A x B) x C = ?????</ul>  
 <p>et il est important de préciser que les deux expressions</p>
 <ul>(A x B) x C != A x (B x C)</ul>
 <p>ne sont pas égaux puisque le <b>produit vectoriel n'est pas commutatif</b>.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - - Le 1ier vecteur dans le double produit vectoriel.</dd>
<dd><code>B</code> - - Le 2ième vecteur dans le double produit vectoriel.</dd>
<dd><code>C</code> - - Le 3ième vecteur dans le double produit vectoriel.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur résultant du triple produit vectoriel.</dd>
</dl>
</li>
</ul>
<a name="AmultiplyBaddC-double-ressources.SVector3d-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>AmultiplyBaddC</h4>
<pre>public static&nbsp;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;AmultiplyBaddC(double&nbsp;a,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;B,
                                       <a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;C)</pre>
<div class="block">Méthode qui effectue une opération spécialisée de multiplication par un scalaire et d'addition vectorielle équivalente à
 <ul>V = a*B + C.</ul></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>a</code> - - Le scalaire à multiplier avec B.</dd>
<dd><code>B</code> - - Le 1ier vecteur dans l'expression vectorielle.</dd>
<dd><code>C</code> - - Le 2ième vecteur dans l'expression vectorielle à ajouter.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur résultant de cette opération spécialisée.</dd>
</dl>
</li>
</ul>
<a name="toString--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="hashCode--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hashCode</h4>
<pre>public&nbsp;int&nbsp;hashCode()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="equals-java.lang.Object-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equals</h4>
<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;obj)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="compareTo-ressources.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>compareTo</h4>
<pre>public&nbsp;int&nbsp;compareTo(<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&nbsp;o)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code>compareTo</code>&nbsp;in interface&nbsp;<code>java.lang.Comparable&lt;<a href="../ressources/SVector3d.html" title="class in ressources">SVector3d</a>&gt;</code></dd>
</dl>
</li>
</ul>
<a name="setX-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setX</h4>
<pre>public&nbsp;void&nbsp;setX(double&nbsp;x)</pre>
</li>
</ul>
<a name="setY-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setY</h4>
<pre>public&nbsp;void&nbsp;setY(double&nbsp;y)</pre>
</li>
</ul>
<a name="setZ-double-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>setZ</h4>
<pre>public&nbsp;void&nbsp;setZ(double&nbsp;z)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SVector3d.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../ressources/SVector.html" title="interface in ressources"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../ressources/SWriteable.html" title="interface in ressources"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?ressources/SVector3d.html" target="_top">Frames</a></li>
<li><a href="SVector3d.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
